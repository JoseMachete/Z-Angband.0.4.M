subdir = ./src/

##
## Actually build the source to make the game
##

##
## ##### Zangband Files to compile #####
##

CFLAGS += -Isrc -Isrc/platform -Isrc/libpng \
	-Isrc/platform/x11 -Isrc/platform/win

##
## The Zangband source files
##

NORMOBJS := $(addprefix src/,\
	variable.o tables.o util.o cave.o \
	signals.o ui-inkey.o userid.o \
	object1.o object2.o monster1.o monster2.o \
	xtra1.o xtra2.o spells1.o spells2.o \
	melee1.o melee2.o save.o files.o fields.o \
	cmd1.o cmd2.o cmd3.o cmd4.o cmd5.o cmd6.o cmd7.o \
        cmd0.o ui.o ui-menu.o ui-region.o cmd-context.o \
        store.o birth.o birth-modify.o load.o hero.o button.o cmd-menu.o \
	wizard1.o wizard2.o grid.o streams.o rooms.o \
	generate.o dungeon.o game.o init1.o init2.o cmd0.o \
	effects.o quest1.o quest2.o racial.o run.o script.o \
	artifact.o mutation.o flavor.o spells3.o \
	mspells1.o mspells2.o scores.o mind.o wild4.o \
	bldg.o obj_kind.o wild1.o wild2.o wild3.o avatar.o notes.o)

ANGOBJS := $(addprefix src/, maid-grf.o) \
	$(addprefix src/platform/x11/, maid-x11.o main-x11.o x11-menu.o \
	x11-png.o x11-tiles.o x11-layout.o main-xaw.o main-xpj.o) \
	$(addprefix src/platform/, main-cap.o main-gcu.o \
	main-lsl.o main-vcs.o main-gtk.o main.o \
	main-dos.o main-ibm.o main-emx.o main-tnb.o \
	main-ami.o grafmode.o settings.o pickfile.o)

WINOBJS := $(addprefix src/platform/win,\
	main-win.o readdib.o \
	readdx9.o win-layout.o)


##
## The wrapper auto-generated files
##

LUAWOBJS := $(addprefix src/,\
	l-monst.o l-object.o l-player.o l-random.o l-ui.o \
	l-misc.o l-spell.o l-field.o)

##
## The "Utility" files
##

ZUTILOBJS := $(addprefix src/,\
	z-file.o z-msg.o z-quark.o \
	z-util.o z-virt.o z-form.o z-rand.o z-term.o)
	
##
## The Borg files
##

##
## The libpng files
##

PNGOBJS := $(addprefix src/libpng/zlib_1_2_5/,\
	adler32.o compress.o crc32.o gzclose.o gzlib.o gzread.o gzwrite.o \
	infback.o inffast.o inflate.o inftrees.o trees.o uncompr.o zutil.o) \
	$(addprefix src/libpng/, \
	png.o pngerror.o pngget.o pngmem.o pngpread.o pngset.o \
	pngread.o pngrio.o pngrtran.o pngrutil.o pngtrans.o \
	pngwio.o pngwrite.o pngwtran.o pngwutil.o)

LIBS += -lm
	
##
## Normal list of object files.
##
objs-y += $(ZUTILOBJS) $(PNGOBJS) $(LUAWOBJS) $(NORMOBJS) $(ANGOBJS)

##
## Extra object files depending on the ports
##

objs-$(amiga) += src/sound-ami.o

objs-$(cygwin) += src/platform/win/zplus.res $(WINOBJS)
ifeq ($(cygwin),y)
src/platform/win/zplus.res : src/platform/win/zplus.rc
	windres $< -O coff -o $@
endif

objs-$(lcc) += src/platform/win/zplus.res $(WINOBJS)
ifeq ($(lcc),y)
src/platform/win/zplus.res : src/platform/win/zplus.rc
	$(LCC_PATH)\bin\lrc.exe -I$(LCC_PATH)\include $^
endif

objs-$(emx) += src/main-epm.o src/zangband.a

ifeq ($(emx),y)

INSTALL += \
		emxbind -s $(bindir)zangband.exe\
		copy src\aclient.exe $(bindir)\
		emxbind -s $(bindir)aclient.exe\

AR := ar

src/aclient.exe: src/main-emx.c
	$(CC) $(CFLAGS) -D__EMX__CLIENT__ -o $@ $< $(LDFLAGS)

src/main-epm.o: src/main-emx.c
	$(CC) $(CFLAGS) -DEMXPM -c -o $@ $<

src/zangband.a: $(OBJS)
	$(AR) r $@ $(OBJS)

endif

##
## Autoconf header
##
src/autoconf.h:
	$(CONFIGURE)

##
## Low-level Headers
##

HDRS := $(addprefix src/,\
	autoconf.h h-basic.h h-define.h h-type.h h-system.h h-config.h)

##
## Angband includes
##

INCS := $(addprefix src/,\
	angband.h \
	z-config.h defines.h types.h externs.h \
	z-term.h z-rand.h z-util.h z-virt.h z-form.h) $(HDRS)

##
## Generic dependancy information
##

$(NORMOBJS): $(INCS) .default_path
$(ZUTILOBJS): $(HDRS)
$(LUAWOBJS): $(INCS)
$(ANGOBJS): $(INCS) .default_path
$(WINOBJS): $(INCS) .default_path


##
## Extra dependancies
##

GRAF_PORTS = src/maid-grf.o $(addprefix src/platform/,\
		main-ami.o maid-x11.o main-x11.o \
		main-gtk.o main-tnb.o win/main-win.o \
		main-xaw.o main-xpj.o)
$(GRAFPORTS): src/maid-grf.h src/angband.h src/platform/maid-x11.h

src/cmd6.o: src/script.h
src/init1.c: src/init.h
src/init2.c: src/init.h src/script.h
src/generate.o: src/grid.h src/generate.h src/rooms.h src/streams.h
src/grid.o: src/grid.h src/generate.h
src/rooms.o: src/grid.h src/generate.h src/rooms.h
src/streams.o: src/grid.h src/generate.h
src/fields.o: src/grid.h src/script.h
src/script.o: src/script.h
src/quest1.o: src/wild.h src/grid.h
src/quest2.o: src/wild.h src/grid.h
src/readdib.o: src/readdib.h
src/wild1.o: src/wild.h src/grid.h
src/wild2.o: src/wild.h src/grid.h
src/wild3.o: src/wild.h src/grid.h
src/wizard2.o: src/script.h
src/z-form.o: src/z-form.h src/z-util.h src/z-virt.h
src/z-rand.o: src/z-rand.h
src/z-term.o: src/z-term.h src/z-virt.h
src/z-util.o: src/z-util.h
src/z-virt.o: src/z-virt.h src/z-util.h
src/wild4.o: src/wild.h src/grid.h
src/grafmode.o: src/grafmode.h
src/button.o: src/button.h

##
## Build wrappers
##
## $(subst l-,,$(notdir $*)) removes the leading "l-", and
## trailing ".c" and returns a filename with no directory
## attached to it.
##

LUAWSRCS := $(LUAWOBJS:.o=.c)

ifeq ($(VERBOSE), 0)
define TOLUA
	@ echo TOLUA $@
	@ src/lua/tolua
endef
else
TOLUA = src/lua/tolua
endif

dust-files += src/*~
clean-files += src/*.bak src/*.o
distclean-files += autoconf.h

srcdirlist += src
notsrcfiles += src/compress.c src/autoconf.h

srcfiles += src/*.c src/*.h src/platform/*.c src/platform/*.h\
		 src/platform/win/*.c src/platform/win/*.h \
		 src/platform/win/zplus.rc src/platform/win/zplus.ico \
		 src/platform/angband.xpm src/platform/zangband.icns src/makefile* \
		 src/autoconf.h.in

# scan other source directories
dirs := lua platform/tk
include $(scandir)

#$(LUAWSRCS): %.c: %.pkg src/lua/tolua $(TOLUALUAOBJS)
#	$(TOLUA) -n $(subst l-,,$(notdir $*)) -o $@ $<

# List of makefiles in other build system so we can test them
makefiles := $(addprefix src/,\
				makefile.bcc makefile.ros makefile.std)

